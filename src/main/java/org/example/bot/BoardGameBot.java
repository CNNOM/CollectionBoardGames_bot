package org.example.bot;

import org.example.GameSession;
import org.example.dao.BoardGameDao;
import org.example.dao.DaoFactory;
import org.example.game_controller.GameManager;
import org.example.game_controller.GameSessionManager;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class BoardGameBot extends TelegramLongPollingBot {

    private GameManager gameManager;
    private GameSessionManager sessionManager;
    private BoardGameDao dao;
    private String currentStorageType = "mongodb"; // default storage
    private List<GameSession> gameHistory;

    public BoardGameBot() {
        initDao(currentStorageType);
        this.gameHistory = dao.getGameHistory();
    }

    private void initDao(String storageType) {
        this.dao = DaoFactory.createTaskDao(storageType);
        this.gameManager = new GameManager(dao);
        this.sessionManager = new GameSessionManager(dao);
        this.currentStorageType = storageType;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            Message message = update.getMessage();
            String chatId = message.getChatId().toString();
            String text = message.getText().trim();

            try {
                String response = processCommand(chatId, text);
                sendMessage(chatId, response);
            } catch (Exception e) {
                sendMessage(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞: " + e.getMessage());
                e.printStackTrace();
            }
        }
    }

    public String processCommand(String chatId, String command) {
        String[] parts = command.split(" ", 2);
        String cmd = parts[0].toLowerCase();
        String args = parts.length > 1 ? parts[1] : "";

        try {
            switch (cmd) {
                case "/start":
                    return getWelcomeMessage();
                case "/help":
                    return getHelpMessage();
                case "/games":
                    return gameManager.listAllGames();
                case "/addgame":
                    return gameManager.addGame(args);
                case "/history":
                    return sessionManager.getRecentSessions(5);
                case "/addsession":
                    String result = sessionManager.addSession(args);
                    sessionManager.updateGameStatuses();
                    return result;
                case "/stats":
                    return sessionManager.getWinStatistics(args);
                case "/setstorage":
                    return setStorageType(args);
                case "/filterdate":
                    return filterByDate(args);
                case "/filterstatus":
                    return filterByStatus(args);
                case "/filtergame":
                    return gameManager.getGameInfo(args);

                default:
                    return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.";
            }
        } catch (Exception e) {
            System.err.println("Error processing command: " + command);
            e.printStackTrace();
            return "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã";
        }
    }

    private String getWelcomeMessage() {
        return "üé≤ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Tabletop Game Advisor!\n\n" +
                "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π –Ω–∞—Å—Ç–æ–ª—å–Ω—ã—Ö –∏–≥—Ä –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–≥—Ä–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏.\n\n" +
                getHelpMessage();
    }

    private String getHelpMessage() {
        return "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n" +
                "üéÆ –ò–≥—Ä—ã:\n" +
                "/games - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≥—Ä\n" +
                "/addgame [–Ω–∞–∑–≤–∞–Ω–∏–µ;–æ–ø–∏—Å–∞–Ω–∏–µ; –∫–∞—Ç–µ–≥–æ—Ä–∏—è;–º–∏–Ω_–∏–≥—Ä–æ–∫–æ–≤;–º–∞–∫—Å_–∏–≥—Ä–æ–∫–æ–≤;–≤—Ä–µ–º—è] - –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É\n\n" +
                "üìÖ –°–µ—Å—Å–∏–∏:\n" +
                "/history - –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π\n" +
                "/addsession [–∏–≥—Ä–∞;–∏–≥—Ä–æ–∫–∏;–ø–æ–±–µ–¥–∏—Ç–µ–ª—å] - –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Å—Å–∏—é\n" +
                "/stats [–Ω–∞–∑–≤–∞–Ω–∏–µ] - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–±–µ–¥ –ø–æ –∏–≥—Ä–µ\n\n" +
                "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n" +
                "/setstorage [memory|mongodb|json] - –ò–∑–º–µ–Ω–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö\n\n" +
                "–¢–µ–∫—É—â–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: " + currentStorageType + "\n\n" +
                "üîç –§–∏–ª—å—Ç—Ä—ã:\n" +
                "/filterdate [–Ω–∞—á–∞–ª–æ;–∫–æ–Ω–µ—Ü] - –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ (—Ñ–æ—Ä–º–∞—Ç: –ì–ì–ì–ì-–ú–ú-–î–î)\n" +
                "/filterstatus [STATUS] - –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É (IN_PROGRESS, PLAYED)\n" +
                "/filtergame [–Ω–∞–∑–≤–∞–Ω–∏–µ] - –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–≥—Ä—ã\n" +
                "‚ùì –ü–æ–º–æ—â—å:\n" +
                "/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º";
    }

    private String setStorageType(String storageType) {
        try {
            initDao(storageType);
            return "‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: " + storageType +
                    "\n–¢–µ–∫—É—â–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: " + currentStorageType;
        } catch (Exception e) {
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: " + e.getMessage() +
                    "\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: memory, mongodb, json";
        }
    }

    private String filterByDate(String dateArgs) {
        try {
            String[] dates = dateArgs.split(";");
            LocalDate fromDate = dates.length > 0 && !dates[0].isEmpty() ? LocalDate.parse(dates[0]) : null;
            LocalDate toDate = dates.length > 1 && !dates[1].isEmpty() ? LocalDate.parse(dates[1]) : null;

            List<GameSession> filteredSessions = gameHistory.stream()
                    .filter(session -> fromDate == null || !session.getDateTime().toLocalDate().isBefore(fromDate))
                    .filter(session -> toDate == null || !session.getDateTime().toLocalDate().isAfter(toDate))
                    .collect(Collectors.toList());

            return formatFilteredSessions("üìÖ –°–µ—Å—Å–∏–∏ –ø–æ –¥–∞—Ç–µ:", filteredSessions);
        } catch (Exception e) {
            return "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /filterdate [–Ω–∞—á–∞–ª—å–Ω–∞—è_–¥–∞—Ç–∞;–∫–æ–Ω–µ—á–Ω–∞—è_–¥–∞—Ç–∞]\n" +
                    "–ü—Ä–∏–º–µ—Ä: /filterdate 2023-01-01;2023-12-31";
        }
    }

    private String filterByStatus(String statusArg) {
        try {
            GameSession.GameStatus status = GameSession.GameStatus.valueOf(statusArg.trim().toUpperCase());
            List<GameSession> filteredSessions = gameHistory.stream()
                    .filter(session -> session.getStatus() == status)
                    .collect(Collectors.toList());

            return formatFilteredSessions("üèÜ –°–µ—Å—Å–∏–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É '" + status + "':", filteredSessions);
        } catch (IllegalArgumentException e) {
            return "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã:\n" +
                    Arrays.stream(GameSession.GameStatus.values())
                            .map(Enum::name)
                            .collect(Collectors.joining(", ")) +
                    "\n–ü—Ä–∏–º–µ—Ä: /filterstatus IN_PROGRESS";
        }
    }

    private String formatFilteredSessions(String header, List<GameSession> sessions) {
        if (sessions.isEmpty()) {
            return "üîç –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–µ—Å—Å–∏–π –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.";
        }

        StringBuilder result = new StringBuilder(header).append("\n\n");
        for (GameSession session : sessions) {
            result.append(session.toString()).append("\n\n");
        }
        return result.toString();
    }

    private void sendMessage(String chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        message.enableHtml(true);

        if (text.equals(getWelcomeMessage())) {
            message.setReplyMarkup(createMainKeyboard());
        }

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private ReplyKeyboardMarkup createMainKeyboard() {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboard = new ArrayList<>();

        // –ü–µ—Ä–≤—ã–π —Ä—è–¥ - –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        KeyboardRow row1 = new KeyboardRow();
        row1.add("üéÆ –°–ø–∏—Å–æ–∫ –∏–≥—Ä");
        row1.add("üîç –ü–æ–∏—Å–∫ –∏–≥—Ä—ã");
        row1.add("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞");

        // –í—Ç–æ—Ä–æ–π —Ä—è–¥ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏
        KeyboardRow row2 = new KeyboardRow();
        row2.add("üìÖ –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä");
        row2.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É");
        row2.add("üé≤ –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Å—Å–∏—é");

        // –¢—Ä–µ—Ç–∏–π —Ä—è–¥ - —Ñ–∏–ª—å—Ç—Ä—ã
        KeyboardRow row3 = new KeyboardRow();
        row3.add("üìÖ –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ");
        row3.add("üè∑ –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É");

        // –ß–µ—Ç–≤–µ—Ä—Ç—ã–π —Ä—è–¥ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–º–æ—â—å
        KeyboardRow row4 = new KeyboardRow();
        row4.add("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏");
        row4.add("‚ùì –ü–æ–º–æ—â—å");

        keyboard.add(row1);
        keyboard.add(row2);
        keyboard.add(row3);
        keyboard.add(row4);

        keyboardMarkup.setKeyboard(keyboard);
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);
        keyboardMarkup.setSelective(true);

        return keyboardMarkup;
    }

    @Override
    public String getBotUsername() {
        return "CollectionBoardGames_bot";
    }

    @Override
    public String getBotToken() {
        return "7978010225:AAGIC6g0LSgsdUzXfVwhMjL9N3DX2E3RfdU";
    }

    @Override
    public void onClosing() {
        try {
            dao.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        super.onClosing();
    }
}
