package org.example.bot;

import org.example.dao.BoardGameDao;
import org.example.dao.BoardGameDaoJsonImpl;
import org.example.dao.DaoFactory;
import org.example.game_controller.GameManager;
import org.example.game_controller.GameSessionManager;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.ArrayList;
import java.util.List;

public class BoardGameBot extends TelegramLongPollingBot {
    private final GameManager gameManager;
    private final GameSessionManager sessionManager;
    private final BoardGameDao dao;

    public BoardGameBot() {
        this.dao = DaoFactory.createTaskDao("mongodb");
        this.gameManager = new GameManager(dao);
        this.sessionManager = new GameSessionManager(dao);
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            Message message = update.getMessage();
            String chatId = message.getChatId().toString();
            String text = message.getText().trim();

            try {
                String response = processCommand(chatId, text);
                sendMessage(chatId, response);
            } catch (Exception e) {
                sendMessage(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞: " + e.getMessage());
                e.printStackTrace();
            }
        }
    }

    private String processCommand(String chatId, String command) {
        String[] parts = command.split(" ", 2);
        String cmd = parts[0].toLowerCase();
        String args = parts.length > 1 ? parts[1] : "";

        try {
            switch (cmd) {
                case "/start":
                    return getWelcomeMessage();
                case "/help":
                    return getHelpMessage();
                case "/games":
                    return gameManager.listAllGames();
                case "/addgame":
                    return gameManager.addGame(args);
                case "/gameinfo":
                    return gameManager.getGameInfo(args);
                case "/history":
                    // –¢–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
                    return sessionManager.getRecentSessions(5);
                case "/addsession":
                    String result = sessionManager.addSession(args);
                    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                    sessionManager.updateGameStatuses();
                    return result;
                case "/stats":
                    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è
                    return sessionManager.getWinStatistics(args);
                default:
                    return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.";
            }
        } catch (Exception e) {
            System.err.println("Error processing command: " + command);
            e.printStackTrace();
            return "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã";
        }
    }

    private String getWelcomeMessage() {
        return "üé≤ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BoardGameBot!\n\n" +
                "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π –Ω–∞—Å—Ç–æ–ª—å–Ω—ã—Ö –∏–≥—Ä –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–≥—Ä–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏.\n\n" +
                getHelpMessage();
    }

    private String getHelpMessage() {
        return "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n" +
                "üéÆ –ò–≥—Ä—ã:\n" +
                "/games - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≥—Ä\n" +
                "/gameinfo [–Ω–∞–∑–≤–∞–Ω–∏–µ] - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–µ\n" +
                "/addgame [–Ω–∞–∑–≤–∞–Ω–∏–µ;–æ–ø–∏—Å–∞–Ω–∏–µ;–∫–∞—Ç–µ–≥–æ—Ä–∏—è;–º–∏–Ω_–∏–≥—Ä–æ–∫–æ–≤;–º–∞–∫—Å_–∏–≥—Ä–æ–∫–æ–≤;–≤—Ä–µ–º—è] - –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É\n\n" +
                "üìÖ –°–µ—Å—Å–∏–∏:\n" +
                "/history - –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π\n" +
                "/addsession [–∏–≥—Ä–∞;–∏–≥—Ä–æ–∫–∏;–ø–æ–±–µ–¥–∏—Ç–µ–ª—å] - –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Å—Å–∏—é\n" +
                "/stats [–Ω–∞–∑–≤–∞–Ω–∏–µ] - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–±–µ–¥ –ø–æ –∏–≥—Ä–µ\n\n" +
                "‚ùì –ü–æ–º–æ—â—å:\n" +
                "/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º";
    }

    private void sendMessage(String chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        message.enableHtml(true);

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        if (text.equals(getWelcomeMessage())){
            message.setReplyMarkup(createMainKeyboard());
        }

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private ReplyKeyboardMarkup createMainKeyboard() {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboard = new ArrayList<>();

        // –ü–µ—Ä–≤—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
        KeyboardRow row1 = new KeyboardRow();
        row1.add("/games");
        row1.add("/gameinfo");
        row1.add("/history");

        // –í—Ç–æ—Ä–æ–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
        KeyboardRow row2 = new KeyboardRow();
        row2.add("/addgame");
        row2.add("/addsession");
        row2.add("/stats");

        // –¢—Ä–µ—Ç–∏–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
        KeyboardRow row3 = new KeyboardRow();
        row3.add("/help");

        keyboard.add(row1);
        keyboard.add(row2);
        keyboard.add(row3);

        keyboardMarkup.setKeyboard(keyboard);
        keyboardMarkup.setResizeKeyboard(true);
        return keyboardMarkup;
    }

    @Override
    public String getBotUsername() {
        return "CollectionBoardGames_bot";
    }

    @Override
    public String getBotToken() {
        return "7978010225:AAGIC6g0LSgsdUzXfVwhMjL9N3DX2E3RfdU";
    }

    @Override
    public void onClosing() {
        try {
            dao.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        super.onClosing();
    }
}