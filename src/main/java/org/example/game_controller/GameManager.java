package org.example.game_controller;

import org.example.BoardGame;
import org.example.GameSession;
import org.example.dao.BoardGameDao;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class GameManager {
    private final BoardGameDao boardGameDao;
    private List<BoardGame> allGames;

    public GameManager(BoardGameDao boardGameDao) {
        this.boardGameDao = boardGameDao;
        refreshGames();
    }

    public void refreshGames() {
        this.allGames = boardGameDao.getAllGames();
    }

    // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–∞–º–∏

    public String addGame(String input) {
        try {
            String[] parts = input.split(";");
            if (parts.length < 6) {
                return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /addgame –ù–∞–∑–≤–∞–Ω–∏–µ;–û–ø–∏—Å–∞–Ω–∏–µ;–ö–∞—Ç–µ–≥–æ—Ä–∏—è;–ú–∏–Ω_–∏–≥—Ä–æ–∫–æ–≤;–ú–∞–∫—Å_–∏–≥—Ä–æ–∫–æ–≤;–°—Ä–µ–¥–Ω–µ–µ_–≤—Ä–µ–º—è";
            }

            String name = parts[0].trim();
            String description = parts[1].trim();
            String category = parts[2].trim();
            int minPlayers = Integer.parseInt(parts[3].trim());
            int maxPlayers = Integer.parseInt(parts[4].trim());
            int avgTime = Integer.parseInt(parts[5].trim());

            addNewGame(name, description, category, minPlayers, maxPlayers, avgTime);
            return "‚úÖ –ò–≥—Ä–∞ \"" + name + "\" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é!";
        } catch (NumberFormatException e) {
            return "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–∏–≥—Ä–æ–∫–∏/–≤—Ä–µ–º—è)";
        } catch (IllegalArgumentException e) {
            return "‚ùå –û—à–∏–±–∫–∞: " + e.getMessage();
        } catch (Exception e) {
            return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä—ã";
        }
    }

    public void addNewGame(String name, String description, String category,
                           int minPlayers, int maxPlayers, int avgTime) {
        validateGameParameters(name, minPlayers, maxPlayers, avgTime);

        BoardGame newGame = new BoardGame(
                null,
                name,
                description,
                category,
                minPlayers,
                maxPlayers,
                avgTime
        );

        boardGameDao.addGame(newGame);
        refreshGames();
    }

    private void validateGameParameters(String name, int minPlayers, int maxPlayers, int avgTime) {
        if (name == null || name.isEmpty()) {
            throw new IllegalArgumentException("–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ");
        }
        if (minPlayers <= 0) {
            throw new IllegalArgumentException("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0");
        }
        if (minPlayers > maxPlayers) {
            throw new IllegalArgumentException("–ú–∏–Ω–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º—É–º–∞");
        }
        if (avgTime <= 0) {
            throw new IllegalArgumentException("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∏–≥—Ä—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º");
        }
    }

    public String listAllGames() {
        if (allGames.isEmpty()) {
            return "üé≤ –í –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä.";
        }

        StringBuilder sb = new StringBuilder("üé≤ <b>–ö–æ–ª–ª–µ–∫—Ü–∏—è –∏–≥—Ä</b>:\n\n");
        for (BoardGame game : allGames) {
            sb.append(game.toFormattedString()).append("\n\n");
        }
        return sb.toString();
    }

    public String getGameInfo(String gameName) {
        if (gameName == null || gameName.isEmpty()) {
            return "‚ÑπÔ∏è –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã: /filtergame –ù–∞–∑–≤–∞–Ω–∏–µ–ò–≥—Ä—ã";
        }

        BoardGame game = findGameByName(gameName);
        if (game == null) {
            return "‚ùå –ò–≥—Ä–∞ \"" + gameName + "\" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏.";
        }

        return game.toDetailedString();
    }

    public BoardGame findGameByName(String gameName) {
        return allGames.stream()
                .filter(g -> g.getName().equalsIgnoreCase(gameName))
                .findFirst()
                .orElse(null);
    }

    public List<BoardGame> findGamesByCategory(String category) {
        return allGames.stream()
                .filter(g -> g.getCategory().equalsIgnoreCase(category))
                .collect(Collectors.toList());
    }

    public String listGamesByCategory(String category) {
        List<BoardGame> games = findGamesByCategory(category);
        if (games.isEmpty()) {
            return "‚ùå –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"" + category + "\" –ø–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä.";
        }

        StringBuilder sb = new StringBuilder("üé≤ –ò–≥—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"" + category + "\":\n\n");
        for (BoardGame game : games) {
            sb.append(game.toShortString()).append("\n");
        }
        return sb.toString();
    }

    public String removeGame(String gameName) {
        BoardGame game = findGameByName(gameName);
        if (game == null) {
            return "‚ùå –ò–≥—Ä–∞ \"" + gameName + "\" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏.";
        }

        refreshGames();
        return "‚úÖ –ò–≥—Ä–∞ \"" + gameName + "\" —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏.";
    }

    public List<BoardGame> getGamesForPlayers(int playersCount) {
        return allGames.stream()
                .filter(g -> g.getMinPlayers() <= playersCount && g.getMaxPlayers() >= playersCount)
                .collect(Collectors.toList());
    }

    public String suggestGamesForPlayers(int playersCount) {
        List<BoardGame> suitableGames = getGamesForPlayers(playersCount);
        if (suitableGames.isEmpty()) {
            return "‚ùå –ù–µ—Ç –∏–≥—Ä, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–ª—è " + playersCount + " –∏–≥—Ä–æ–∫–æ–≤.";
        }

        StringBuilder sb = new StringBuilder("üé≤ –ò–≥—Ä—ã –¥–ª—è " + playersCount + " –∏–≥—Ä–æ–∫–æ–≤:\n\n");
        for (BoardGame game : suitableGames) {
            sb.append(game.toShortString()).append("\n");
        }
        return sb.toString();
    }


}