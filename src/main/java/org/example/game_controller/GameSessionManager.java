package org.example.game_controller;

import org.example.BoardGame;
import org.example.GameSession;
import org.example.dao.BoardGameDao;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;

public class GameSessionManager {
    private final BoardGameDao boardGameDao;
    private final List<BoardGame> allGames;

    public GameSessionManager(BoardGameDao boardGameDao) {
        this.boardGameDao = boardGameDao;
        this.allGames = boardGameDao.getAllGames(); // –ö—ç—à–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–≥—Ä—ã, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —Ä–µ–¥–∫–æ –º–µ–Ω—è—é—Ç—Å—è
    }

    public void addPlayedGame(String gameName, String winner, List<String> players) {
        if (gameName == null || gameName.isEmpty()) {
            throw new IllegalArgumentException("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É");
        }

        if (winner == null || winner.isEmpty()) {
            throw new IllegalArgumentException("–£–∫–∞–∂–∏—Ç–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è");
        }

        if (players == null || players.isEmpty()) {
            throw new IllegalArgumentException("–£–∫–∞–∂–∏—Ç–µ –∏–≥—Ä–æ–∫–æ–≤");
        }

        if (!players.contains(winner)) {
            throw new IllegalArgumentException("–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å–ø–∏—Å–∫–µ –∏–≥—Ä–æ–∫–æ–≤");
        }

        BoardGame game = allGames.stream()
                .filter(g -> g.getName().equalsIgnoreCase(gameName))
                .findFirst()
                .orElseThrow(() -> new IllegalArgumentException("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"));

        GameSession session = new GameSession(
                null,
                game.getId(),
                game.getName(),
                LocalDateTime.now(),
                players,
                winner,
                GameSession.GameStatus.IN_PROGRESS
        );

        boardGameDao.addGameSession(session);
    }

    public void updateGameStatuses() {
        // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –∫–∞–∂–¥—ã–π —Ä–∞–∑
        List<GameSession> sessions = boardGameDao.getGameHistory();

        for (GameSession session : sessions) {
            if (session.getDateTime().toLocalDate().isBefore(LocalDate.now().minusDays(1)) &&
                    session.getStatus() != GameSession.GameStatus.PLAYED) {
                session.setStatus(GameSession.GameStatus.PLAYED);
                boardGameDao.updateGameSessionStatus(session);
            }
        }
    }

    public String getRecentSessions(int limit) {
        List<GameSession> history = boardGameDao.getGameHistory();

        if (history.isEmpty()) {
            return "–ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä –ø—É—Å—Ç–∞.";
        }

        history.sort((s1, s2) -> s2.getDateTime().compareTo(s1.getDateTime()));

        StringBuilder sb = new StringBuilder("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–≥—Ä—ã:\n");
        history.stream()
                .limit(limit)
                .forEach(session -> sb.append(session.toString()).append("\n\n"));

        return sb.toString();
    }

    public String addSession(String input) {
        if (input == null || input.isEmpty()) {
            return "‚ÑπÔ∏è –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: /addsession –ò–≥—Ä–∞;–ò–≥—Ä–æ–∫–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é);–ü–æ–±–µ–¥–∏—Ç–µ–ª—å";
        }
        try {
            String[] parts = input.split(";");
            if (parts.length < 3) {
                return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /addsession –ò–≥—Ä–∞;–ò–≥—Ä–æ–∫–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é);–ü–æ–±–µ–¥–∏—Ç–µ–ª—å";
            }

            String gameName = parts[0].trim();
            String playersStr = parts[1].trim();
            String winner = parts[2].trim();

            List<String> players = Arrays.stream(playersStr.split(","))
                    .map(String::trim)
                    .collect(Collectors.toList());

            addPlayedGame(gameName, winner, players);
            return "‚úÖ –°–µ—Å—Å–∏—è –∏–≥—Ä—ã \"" + gameName + "\" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!";
        } catch (IllegalArgumentException e) {
            return "‚ùå –û—à–∏–±–∫–∞: " + e.getMessage();
        } catch (Exception e) {
            return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏";
        }
    }

    public String getWinStatistics(String gameName) {
        if (gameName == null || gameName.isEmpty()) {
            return "‚ÑπÔ∏è –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã: /stats [–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã]";
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ø–æ –∏–≥—Ä–µ
        List<GameSession> gameSessions = boardGameDao.getGameHistory().stream()
                .filter(session -> session.getGameName().equalsIgnoreCase(gameName))
                .collect(Collectors.toList());

        if (gameSessions.isEmpty()) {
            return "‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏–≥—Ä–µ \"" + gameName + "\"";
        }

        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        Set<String> allPlayers = new HashSet<>();
        gameSessions.forEach(session -> allPlayers.addAll(session.getPlayers()));

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–±–µ–¥
        Map<String, Integer> winStats = new HashMap<>();
        allPlayers.forEach(player -> winStats.put(player, 0)); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å 0 –ø–æ–±–µ–¥

        gameSessions.forEach(session -> {
            String winner = session.getWinner();
            winStats.put(winner, winStats.getOrDefault(winner, 0) + 1);
        });

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        long totalGames = gameSessions.size();
        long completedGames = gameSessions.stream()
                .filter(s -> s.getStatus() == GameSession.GameStatus.PLAYED)
                .count();

        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–±–µ–¥ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        List<Map.Entry<String, Integer>> sortedStats = new ArrayList<>(winStats.entrySet());
        sortedStats.sort((e1, e2) -> e2.getValue().compareTo(e1.getValue()));

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        StringBuilder sb = new StringBuilder();
        sb.append("üèÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–µ \"").append(gameName).append("\":\n\n");
        sb.append("–í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: ").append(totalGames).append("\n");
        sb.append("–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö: ").append(completedGames).append("\n");
        sb.append("–í –ø—Ä–æ—Ü–µ—Å—Å–µ: ").append(totalGames - completedGames).append("\n\n");
        sb.append("–í—Å–µ –∏–≥—Ä–æ–∫–∏:\n");

        for (Map.Entry<String, Integer> entry : sortedStats) {
            String player = entry.getKey();
            int wins = entry.getValue();
            double winPercentage = totalGames > 0 ? (double) wins / totalGames * 100 : 0;

            sb.append(String.format("‚Ä¢ %s: %d –ø–æ–±–µ–¥ (%.1f%%)%n",
                    player, wins, winPercentage));
        }

        return sb.toString();
    }
}